from math import sqrt
from collections import Counter
from functools import reduce

'''
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''


def generateTriangularNumbers():

    n = 7

    while True:

        num = (n * (n + 1))/2
        yield int(num) if num % 2 == 0 else 0
        n += 1


def generatePrimeNumbers():

    number  = 2
    c = 0

    while True:

        if not (number % 2 == 0 and number > 2):

            for divisor in range(3, int(sqrt(number))+1, 2):

                if number % divisor == 0:
                    c = 1
                    break

            if  c != 1:
                yield number

        number += 1
        c = 0



def primeFactorizeNumber(currentNumber):
    primeNumbers = generatePrimeNumbers()
    output = []

    while currentNumber > 1:

        factor = next(primeNumbers)

        if currentNumber % factor == 0:
            output.append(factor)
            currentNumber /= factor
            primeNumbers = generatePrimeNumbers()

        else:
            continue

    return output



def main():

    c = True
    triangularNumbers = generateTriangularNumbers()
    while c:

        currentNumber = next(triangularNumbers)
        if currentNumber != 0:
            powerCount = list(Counter(primeFactorizeNumber(currentNumber)).values())
            numberOfFactors = reduce(lambda x, y: x * y, map(lambda x: x + 1, powerCount))

            if numberOfFactors > 500:
                print(currentNumber)
                c = False

main()